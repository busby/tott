extends layout

block head
  title Javascript - TotT

block slides

  section
    h1 JavaScript
    p.subtitle TotT: 2014

  section
    h2 JavaScript
    blockquote "JavaScript is a prototype-based scripting language with dynamic typing and first-class functions." <br />- <a href="http://en.wikipedia.org/wiki/JavaScript">Wikipedia</a>

  section
    h2 Major Attributes
    ul
      li C-derived syntax
      li Runtime interpretation
      li Dynamic typing
      li First-class functions
      li Prototypical inheritence
      li Garbage collection
      li Rich literal types

  section
    h2 Use Cases
    ul
      li Embedded scripting
      li Frontend web development
      li Backend web development

  section
    h2 Example: Factorial
    pre
      code.
        /*
         * Computes the factorial of a number.
         */
        var factorial = function(n) {
          if (n === 0) {
            return 1;
          }
          return n * factorial(n - 1);
        };
        var f = factorial(5);
        console.log(f);

  section
    h2 Example: Sine
    pre
      code.
        // object literal
        var waves = {},
            step = Math.PI / 3;

        // array literals
        waves.sin = [];
        waves.cos = [];
        for(var i=0; i &lt; Math.PI; i+=step) {
          waves.sin.push(Math.sin(i));
          waves.cos.push(Math.cos(i));
        }

        console.log(waves);

  section
    h2 Example: Animals
    pre
      code.
        // constructor
        var Mammal = function(name) {
          this.name = name;
        };
        Mammal.prototype.speak = function() {
          console.log(this.name, 'says', this.greeting);
        };

        var Dog = function() {
          this.greeting = 'woof!'
          // invoke Mammal bound to this
          Mammal.apply(this, arguments);
        };
        // inherit from Mammal
        Dog.prototype = new Mammal();

        var Human = function() {
          this.greeting = 'hello!'
          Mammal.apply(this, arguments);
        };
        Human.prototype = new Mammal();

        var d = new Dog('Fido'),
            h = new Human('Alice');
        d.speak();
        h.speak();

  section
    h2 Example: Evens
    pre
      code.
        var evens = function() {
          // lexical closure
          var count = 0;
          return function() {
            return (count+=2);
          }
        };

        var next = evens();
        console.log(next());
        console.log(next());
        console.log(next());

  section.slide#example-timers
    h2 Example: Timers
    pre
      code.
        // anonymous functions as callbacks
        setTimeout(function() {
          console.log('~1.5 s elapsed')
        }, 1500);

        setInterval(function() {
          console.log('tick');
        }, 1000);

  section.slide#demo-cycle
    h2 Example: Cycle
    pre
      code.
        // variadic function
        var cycle = function(end) {
          if(end === undefined) end = 3;
          var count = 0;
          return function() {
            return (count++ % end);
          }
        };

        var c1 = cycle(4);
        var c2 = cycle();
        console.log(c1(), c1(), c1(), c1(), c1(), c1());
        console.log(c2(), c2(), c2(), c2(), c2(), c2());

  section
    h2 Gotchas
    ul
      li Function scope
      li Automatic semicolons
      li No true methods
      li No import statement
      li No multiline strings
      li Weird operators

  section
    h2 NodeJS
    ul
      li New, circa 2009
      li Run JS server-side
      li Uses Google V8 JS engine
      li Small standard library
      li Event loop, async I/O

  section
    h2 Demo: Working with NodeJS

  section
    h2 Demo: Accidents!

  section
    h2 Review
    ul
      li Language Features
      li Syntax
      li Types
      li Prototypes
      li Function Closures, Callbacks, Parameters
      li NodeJS
      li Gotchas

