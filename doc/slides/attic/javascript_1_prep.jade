extends layout

block head
  title Tools of the Trade

block slides

  section.slide#title
    .vcenter
      h1 Prep: JavaScript
      p.subtitle TotT: 2014

  section.slide#js
    h2 JavaScript
    blockquote "JavaScript is a prototype-based scripting language with dynamic typing and first-class functions." <br />- <a href="http://en.wikipedia.org/wiki/JavaScript">Wikipedia</a>

  section.slide#attributes
    h2 Major Attributes
    ul
      li C-derived syntax
      li Runtime interpretation
      li Dynamic typing
      li First-class functions
      li Prototypical inheritence
      li Garbage collection
      li Rich literal types

  section.slide#use-cases
    h2 Use Cases
    ul
      li Embedded scripting
      li Frontend web development
      li Backend web development

  section.slide#example-factorial
    h2 Example: Factorial
    textarea.code(name="code", runnable="true", mode="javascript", style="display: none;").
        /*
         * Computes the factorial of a number.
         */
        var factorial = function(n) {
          if (n === 0) {
            return 1;
          }
          return n * factorial(n - 1);
        };
        var f = factorial(5);
        console.log(f);

  section.slide#example-sine
    h2 Example: Sine
    textarea.code(name="code", runnable="true", mode="javascript", style="display: none;").
        // object literal
        var waves = {},
            step = Math.PI / 3;

        // array literals
        waves.sin = [];
        waves.cos = [];
        for(var i=0; i < Math.PI; i+=step) {
          waves.sin.push(Math.sin(i));
          waves.cos.push(Math.cos(i));
        }

        console.log(waves);

  section.slide#example-animals
    h2 Example: Animals
    textarea.code(name="code", runnable="true", mode="javascript", style="display: none;").
        // constructor
        var Mammal = function(name) {
          this.name = name;
        };
        Mammal.prototype.speak = function() {
          console.log(this.name, 'says', this.greeting);
        };

        var Dog = function() {
          this.greeting = 'woof!'
          // invoke Mammal bound to this
          Mammal.apply(this, arguments);
        };
        // inherit from Mammal
        Dog.prototype = new Mammal();

        var Human = function() {
          this.greeting = 'hello!'
          Mammal.apply(this, arguments);
        };
        Human.prototype = new Mammal();

        var d = new Dog('Fido'),
            h = new Human('Alice');
        d.speak();
        h.speak();

  section.slide#example-evens
    h2 Example: Evens
    textarea.code(name="code", runnable="true", mode="javascript", style="display: none;").
      var evens = function() {
        // lexical closure
        var count = 0;
        return function() {
          return (count+=2);
        }
      };

      var next = evens();
      console.log(next());
      console.log(next());
      console.log(next());

  section.slide#example-timers
    h2 Example: Timers
    textarea.code(name="code", runnable="true", mode="javascript", style="display: none;").
        // anonymous functions as callbacks
        setTimeout(function() {
          console.log('~1.5 s elapsed')
        }, 1500);

        setInterval(function() {
          console.log('tick');
        }, 1000);

  section.slide#demo-cycle
    h2 Example: Cycle
    textarea.code(name="code", runnable="true", mode="javascript", style="display: none;").
      // variadic function
      var cycle = function(end) {
        if(end === undefined) end = 3;
        var count = 0;
        return function() {
          return (count++ % end);
        }
      };

      var c1 = cycle(4);
      var c2 = cycle();
      console.log(c1(), c1(), c1(), c1(), c1(), c1());
      console.log(c2(), c2(), c2(), c2(), c2(), c2());

  section.slide#gotchas
    h2 Gotchas
    ul
      li Function scope
      li Automatic semicolons
      li No true methods
      li No import statement
      li No multiline strings
      li Weird operators

  section.slide#nodejs
    h2 NodeJS
    ul
      li New, circa 2009
      li Run JS server-side
      li Uses Google V8 JS engine
      li Small standard library
      li Event loop, async I/O

  section.slide#demo
    .vcenter
      h2 Demo: Working with NodeJS

  section.slide#meet
    h2 When We Meet Again
    ul
      li I will summarize this material.
      li I will demonstrate some more examples.
      li You will practice coding in JavaScript.
      li We will discuss what you learned.